<?xml version="1.0"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:mx="library://ns.adobe.com/flex/mx"  showStatusBar="false" width="300" height="350" backgroundColor="0x3c3f41">
    <fx:Style source="skin/black/Black.css" />
    <fx:Script><![CDATA[
        import mx.controls.Alert;

        import ParseJson;

        private var _file:File;

        private function onDragEnter(event:NativeDragEvent):void {
            NativeDragManager.acceptDragDrop(fileContainer);
            fileContainer.setStyle('backgroundColor', '#4F4F4F');
        }

        private function onDropFile(event:NativeDragEvent):void {
            var clip:Clipboard = event.clipboard;
            if (clip.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {
                var arr:Array = clip.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
                var file:File = arr[0] as File;
                if (file.isDirectory) {
                    folderPath.text = file.nativePath;
                    _file = file;
                } else {
                    folderPath.text = "";
                    _file = null;
                }
            } else {
                _file = null;
            }
            folderPath.setStyle("text-decoration", "none");
        }

        private function onClickConvert() {
            if (_file != null) {
                var fileLst:Array = _file.getDirectoryListing();
                if (fileLst.length > 0) {

                    var parseJson:ParseJson = new ParseJson();

                    var textureJson:Array = [];
                    var textureFile:Array = [];
                    var animJson:String = undefined;
                    var animFile:File = null;

                    for (var i:int = 0; i < fileLst.length; ++i) {
                        _file = fileLst[i] as File;
                        if (_file.isDirectory) {
                            copyToSpineDirectory();
                        } else if (_file.extension.toLowerCase() == "json") {
                            try {
                                var fs:FileStream = new FileStream();
                                fs.open(_file, FileMode.READ);
                                var content:String = fs.readMultiByte(fs.bytesAvailable, "utf-8");
                                fs.close();
                            } catch (e:*) {
                                Alert.show(e.toString(), "Error");
                            } finally {
                                if (_file.name.indexOf("texture") == 0) {
                                    //材质的json
                                    textureJson.push(content);
                                    textureFile.push(_file);
                                } else {
                                    //动画json
                                    animJson = content;
                                    animFile = _file;
                                }
                            }
                        } else if (_file.extension.toLowerCase() == "png") {
                            //复制
                            copyToSpineDirectory();
                        }
                    }
                    _file = animFile;
                    if (_file != null) {
                        if (textureJson.length > 0) {
                            parseJson.parseTextureJsons(textureJson);
                            saveTextureJsonFile(parseJson.textureData, animFile.name);
                        }
                        if (animJson) {
                            parseJson.parseAnimJson(animJson);
                            saveAnimJsonFile(parseJson.spineData, parseJson.armatureName + ".json");
                            while (parseJson.hasNextArmature()) {
                                parseJson.nextArmature();
                                saveAnimJsonFile(parseJson.spineData, parseJson.armatureName + ".json");
                            }

                            folderPath.setStyle("text-decoration", "underline");
                            folderPath.text = _file.parent.nativePath + "_spine";
                            showCompleteTip.play();
                        }
                    }
                }
            }
            _file = null;
        }

        private function copyToSpineDirectory():void {
            var path:String = _file.parent.nativePath+ "_spine";
            var dir:File = new File(path);
            if (dir.isDirectory) {
                if (!dir.exists) dir.createDirectory();
            }
            _file.copyTo(new File(dir.nativePath + "/" + _file.name), true);
        }

        private function saveAnimJsonFile(jsonObj:Object, name:String):void {
            var path:String = _file.parent.nativePath + "_spine";
            var dir:File = new File(path);
            if (dir.isDirectory) {
                if (!dir.exists) dir.createDirectory();
            }
            var file:File = new File(dir.nativePath + "/" + name);

            try {
                var json:String = JSON.stringify(jsonObj);
                var fs:FileStream = new FileStream();
                fs.open(file, FileMode.WRITE);
                fs.writeMultiByte(json, "utf-8");
                fs.close();
            } catch (e:Error) {
                Alert.show("Covert json fail!");
            }
        }

        private function saveTextureJsonFile(data:String, name:String):void {

            var path:String = _file.parent.nativePath + "_spine";
            var dir:File = new File(path);
            if (dir.isDirectory) {
                if (!dir.exists) dir.createDirectory();
            }
            var file:File = new File(dir.nativePath + "/" + name.substring(0, name.lastIndexOf(".json")) + ".atlas.txt");

            var fs:FileStream = new FileStream();
            fs.open(file, FileMode.WRITE);
            fs.writeMultiByte(data, "utf-8");
            fs.close();
        }

        private function onCickLabel():void {
            if (folderPath.text.length > 0 && folderPath.getStyle("text-decoration") == "underline") {
                var file:File = new File(folderPath.text);
                if (file.exists && file.isDirectory) {
                    file.openWithDefaultApplication();
                }
            }
        }
        ]]></fx:Script>



    <s:transitions>
        <s:Transition fromState="*" toState="*">
            <s:Sequence target="{tips}" id="showCompleteTip" >
                <s:Move duration="500" yTo="0"/>
                <s:Move duration="500" yTo="-40" startDelay="1000"/>
            </s:Sequence>
        </s:Transition>
    </s:transitions>
    <s:Label text="DragonBoneData v4.5 to SpineData V3.3" left="10" top="5" color="#ffcc00" />
    <s:BorderContainer id="fileContainer" top="20" left="10" right="10" height="200" nativeDragEnter="onDragEnter(event)"
                       nativeDragExit="{fileContainer.setStyle('backgroundColor','#3a3a3a')}"
            nativeDragDrop="onDropFile(event)" >
       <s:Label text="Drag Folder To Here" width="100%" height="100%" mouseEnabled="false" fontSize="24"
                textAlign="center" verticalAlign="middle"/>
    </s:BorderContainer>
    <s:Label text="" id="folderPath" click="onCickLabel()" left="10" right="10" top="230"/>
    <s:Button label="Convert"  horizontalCenter="0" left="20" right="20" bottom="10" height="40"
            skinClass="skin.green.GreenButtonSkin" fontWeight="bold" fontSize="15" click="onClickConvert()"/>

    <s:BorderContainer id="tips" y="-40" left="0" right="0" height="30" backgroundColor="#026500">
        <s:Label text="Convert Complete!" width="100%" height="100%" mouseEnabled="false"
                 textAlign="center" verticalAlign="middle" />
    </s:BorderContainer>
</s:WindowedApplication>
