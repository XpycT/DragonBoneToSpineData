<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark RadioButton component.

 @see spark.components.RadioButton
 @see spark.components.RadioButtonGroup

 @langversion 3.0
 @playerversion Flash 10
 @playerversion AIR 1.5
 @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabledStates="0.5">

  <fx:Metadata>
    <![CDATA[
    /**
     * @copy spark.skins.spark.ApplicationSkin#hostComponent
     */
    [HostComponent("spark.components.RadioButton")]
    ]]>
    </fx:Metadata>

  <fx:Script fb:purpose="styling">
    /* Define the skin elements that should not be colorized.
     For button, the graphics are colorized but the label is not. */
    static private const exclusions:Array = ["labelDisplay", "dot"];

    /**
     * @private
     */
    override public function get colorizeExclusions():Array {return exclusions;}

    /* Define the symbol fill items that should be colored by the "symbolColor" style. */
    static private const symbols:Array = ["dotFill"];

    /**
     * @private
     */
    override public function get symbolItems():Array {return symbols};

    /**
     * @private
     */
    override protected function initializationComplete():void
    {
      useChromeColor = true;
      super.initializationComplete();
    }
  </fx:Script>

  <fx:Script>
        <![CDATA[
    /**
     * @private
     */
    private static const focusExclusions:Array = ["labelDisplay"];

    /**
     *  @private
     */
    override public function get focusSkinExclusions():Array { return focusExclusions;};
    ]]>
    </fx:Script>

  <s:states>
    <s:State name="up" />
    <s:State name="over" stateGroups="overStates" />
    <s:State name="down" stateGroups="downStates" />
    <s:State name="disabled" stateGroups="disabledStates" />
    <s:State name="upAndSelected" stateGroups="selectedStates" />
    <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
    <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
    <s:State name="disabledAndSelected" stateGroups="disabledStates, selectedStates" />
  </s:states>

  <s:Group verticalCenter="0" width="13" height="13">


      <s:Ellipse left="0" top="0" right="0" bottom="0">
          <s:stroke>
              <s:SolidColorStroke color="0x59595a" />
          </s:stroke>
      </s:Ellipse>

    <!-- border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <s:Ellipse left="1" top="1" right="1" bottom="1">
      <s:stroke>
        <s:SolidColorStroke color="#0" />
      </s:stroke>
      <s:fill>
        <s:SolidColor color="#3a3a3a"
                      color.overStates="0x505557"
                      color.downStates="0x505557"
                />
      </s:fill>
    </s:Ellipse>

    <!-- dot -->
    <s:Ellipse left="4" top="4" right="4" bottom="4" includeIn="selectedStates" itemCreationPolicy="immediate">
      <s:fill>
        <s:SolidColor id="dotFill" color="#cccccc" />
      </s:fill>
    </s:Ellipse>
  </s:Group>

  <!-- Label -->
  <!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
  <s:Label id="labelDisplay"
           textAlign="start"
           verticalAlign="middle"
           maxDisplayedLines="1"
           left="18" right="0" top="3" bottom="3" verticalCenter="2" />

</s:SparkSkin>
